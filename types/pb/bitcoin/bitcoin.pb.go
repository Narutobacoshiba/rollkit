// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitcoin/bitcoin.proto

package bitcoin

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RollUpsBlock struct {
	BlockProofs   []byte `protobuf:"bytes,1,opt,name=block_proofs,json=blockProofs,proto3" json:"block_proofs,omitempty"`
	TxOrderProofs []byte `protobuf:"bytes,2,opt,name=tx_order_proofs,json=txOrderProofs,proto3" json:"tx_order_proofs,omitempty"`
	Height        uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *RollUpsBlock) Reset()         { *m = RollUpsBlock{} }
func (m *RollUpsBlock) String() string { return proto.CompactTextString(m) }
func (*RollUpsBlock) ProtoMessage()    {}
func (*RollUpsBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_197d6b337b8185b2, []int{0}
}
func (m *RollUpsBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollUpsBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollUpsBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollUpsBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollUpsBlock.Merge(m, src)
}
func (m *RollUpsBlock) XXX_Size() int {
	return m.Size()
}
func (m *RollUpsBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_RollUpsBlock.DiscardUnknown(m)
}

var xxx_messageInfo_RollUpsBlock proto.InternalMessageInfo

func (m *RollUpsBlock) GetBlockProofs() []byte {
	if m != nil {
		return m.BlockProofs
	}
	return nil
}

func (m *RollUpsBlock) GetTxOrderProofs() []byte {
	if m != nil {
		return m.TxOrderProofs
	}
	return nil
}

func (m *RollUpsBlock) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type StateProofs struct {
	Blocks []*RollUpsBlock `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (m *StateProofs) Reset()         { *m = StateProofs{} }
func (m *StateProofs) String() string { return proto.CompactTextString(m) }
func (*StateProofs) ProtoMessage()    {}
func (*StateProofs) Descriptor() ([]byte, []int) {
	return fileDescriptor_197d6b337b8185b2, []int{1}
}
func (m *StateProofs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateProofs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateProofs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateProofs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateProofs.Merge(m, src)
}
func (m *StateProofs) XXX_Size() int {
	return m.Size()
}
func (m *StateProofs) XXX_DiscardUnknown() {
	xxx_messageInfo_StateProofs.DiscardUnknown(m)
}

var xxx_messageInfo_StateProofs proto.InternalMessageInfo

func (m *StateProofs) GetBlocks() []*RollUpsBlock {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func init() {
	proto.RegisterType((*RollUpsBlock)(nil), "bitcoin.RollUpsBlock")
	proto.RegisterType((*StateProofs)(nil), "bitcoin.StateProofs")
}

func init() { proto.RegisterFile("bitcoin/bitcoin.proto", fileDescriptor_197d6b337b8185b2) }

var fileDescriptor_197d6b337b8185b2 = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0xca, 0x2c, 0x49,
	0xce, 0xcf, 0xcc, 0xd3, 0x87, 0xd2, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xec, 0x50, 0xae,
	0x52, 0x21, 0x17, 0x4f, 0x50, 0x7e, 0x4e, 0x4e, 0x68, 0x41, 0xb1, 0x53, 0x4e, 0x7e, 0x72, 0xb6,
	0x90, 0x22, 0x17, 0x4f, 0x12, 0x88, 0x11, 0x5f, 0x50, 0x94, 0x9f, 0x9f, 0x56, 0x2c, 0xc1, 0xa8,
	0xc0, 0xa8, 0xc1, 0x13, 0xc4, 0x0d, 0x16, 0x0b, 0x00, 0x0b, 0x09, 0xa9, 0x71, 0xf1, 0x97, 0x54,
	0xc4, 0xe7, 0x17, 0xa5, 0xa4, 0x16, 0xc1, 0x54, 0x31, 0x81, 0x55, 0xf1, 0x96, 0x54, 0xf8, 0x83,
	0x44, 0xa1, 0xea, 0xc4, 0xb8, 0xd8, 0x32, 0x52, 0x33, 0xd3, 0x33, 0x4a, 0x24, 0x98, 0x15, 0x18,
	0x35, 0x58, 0x82, 0xa0, 0x3c, 0x25, 0x1b, 0x2e, 0xee, 0xe0, 0x92, 0xc4, 0x92, 0x54, 0xa8, 0x32,
	0x5d, 0x2e, 0x36, 0xb0, 0xe9, 0x20, 0xbb, 0x98, 0x35, 0xb8, 0x8d, 0x44, 0xf5, 0x60, 0x4e, 0x45,
	0x76, 0x58, 0x10, 0x54, 0x91, 0x93, 0xfd, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e,
	0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31,
	0x44, 0xa9, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x17, 0xe5, 0xe7,
	0xe4, 0x64, 0x67, 0x96, 0xc0, 0xe9, 0x94, 0x44, 0x58, 0x00, 0x24, 0xb1, 0x81, 0x43, 0xc0, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0xed, 0xe4, 0x1b, 0xbe, 0x1a, 0x01, 0x00, 0x00,
}

func (m *RollUpsBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollUpsBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollUpsBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TxOrderProofs) > 0 {
		i -= len(m.TxOrderProofs)
		copy(dAtA[i:], m.TxOrderProofs)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.TxOrderProofs)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlockProofs) > 0 {
		i -= len(m.BlockProofs)
		copy(dAtA[i:], m.BlockProofs)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.BlockProofs)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StateProofs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateProofs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateProofs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Blocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBitcoin(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintBitcoin(dAtA []byte, offset int, v uint64) int {
	offset -= sovBitcoin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RollUpsBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockProofs)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	l = len(m.TxOrderProofs)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovBitcoin(uint64(m.Height))
	}
	return n
}

func (m *StateProofs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovBitcoin(uint64(l))
		}
	}
	return n
}

func sovBitcoin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBitcoin(x uint64) (n int) {
	return sovBitcoin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RollUpsBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBitcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollUpsBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollUpsBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockProofs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockProofs = append(m.BlockProofs[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockProofs == nil {
				m.BlockProofs = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxOrderProofs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxOrderProofs = append(m.TxOrderProofs[:0], dAtA[iNdEx:postIndex]...)
			if m.TxOrderProofs == nil {
				m.TxOrderProofs = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBitcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBitcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateProofs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBitcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateProofs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateProofs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &RollUpsBlock{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBitcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBitcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBitcoin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBitcoin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBitcoin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBitcoin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBitcoin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBitcoin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBitcoin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBitcoin = fmt.Errorf("proto: unexpected end of group")
)
